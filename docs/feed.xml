<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="https://vaishnavsm.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://vaishnavsm.com/" rel="alternate" type="text/html" /><updated>2024-06-08T21:13:08-05:00</updated><id>https://vaishnavsm.com/feed.xml</id><title type="html">Vaishnav Sreekanth Menon</title><author><name>Vaishnav Sreekanth Menon</name></author><entry><title type="html">How Many TCP Connections Can You Make?</title><link href="https://vaishnavsm.com/2024-06-08-how-many-tcp-connections/" rel="alternate" type="text/html" title="How Many TCP Connections Can You Make?" /><published>2024-06-08T00:00:00-05:00</published><updated>2024-06-08T00:00:00-05:00</updated><id>https://vaishnavsm.com/how-many-tcp-connections</id><content type="html" xml:base="https://vaishnavsm.com/2024-06-08-how-many-tcp-connections/">&lt;p&gt;To put it in standard interview format,&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Given n machines with m ports each, how many TCP connections can be made theoretically from one to the other?
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;thinking-up-an-answer&quot;&gt;Thinking up an answer&lt;/h2&gt;

&lt;h3 id=&quot;the-simple-logic&quot;&gt;The “simple logic”&lt;/h3&gt;
&lt;p&gt;For those familiar with the socket analogy, it’s easy to come up with a plausible answer.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2024-06-08-how-many-tcp-connections/1.svg&quot; alt=&quot;a simple analogy&quot; style=&quot;max-height: 300px;&quot; class=&quot;centered&quot; /&gt;
If you had two machines with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m&lt;/code&gt; ports on each, you can make &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m&lt;/code&gt; “connections” (think connecting an electrical plug to a socket).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2024-06-08-how-many-tcp-connections/2.svg&quot; alt=&quot;maximizing socket use&quot; style=&quot;max-height: 300px;&quot; class=&quot;centered&quot; /&gt;
You may even think of a clever scheme for more than two machines, where you can use all the available sockets but one in one connection each, giving you &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;floor(mn/2)&lt;/code&gt; possible connections between &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n&lt;/code&gt; machines with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m&lt;/code&gt; connections each.&lt;/p&gt;

&lt;p&gt;Given some elementary knowledge of TCP, you would know that ports on a standard linux machine go from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1-65535&lt;/code&gt;, giving you &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m = 65535&lt;/code&gt;, and voila, you have an answer!&lt;/p&gt;

&lt;h3 id=&quot;hmm-what-about-servers-though&quot;&gt;Hmm, what about servers, though?&lt;/h3&gt;
&lt;p&gt;You notice that the limiting factor in your connection count is that each socket can either make one connection or receive one connection, and that you have reached the highest possible answer in this paradigm. This is when you remember that a server can listen to multiple requests on a single TCP port!&lt;/p&gt;

&lt;p&gt;You try to remember if this happened by opening a new connection for each new request, or if there’s something else ongoing. You seem to remember that each time a socket accepts a connection, a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;file descriptor&lt;/code&gt; is created. This isn’t a socket. You note down that you’ve gotta go read more about file descriptors later, but for now, time to tackle the original question!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2024-06-08-how-many-tcp-connections/3.svg&quot; alt=&quot;servers!&quot; style=&quot;max-height: 300px;&quot; class=&quot;centered&quot; /&gt;
You easily think of a way to reach &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m * (n-1)&lt;/code&gt; connections, just by making a connection from every port on every machine to one “server” machine. Is this it? No.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2024-06-08-how-many-tcp-connections/4.svg&quot; alt=&quot;maximizing socket use v2&quot; style=&quot;max-height: 300px;&quot; class=&quot;centered&quot; /&gt;
You realise that the ports on the “server” are just sitting there unused. With a bit of thought, you figure out that you can sacrifice one port on another machine to create a server, to which the “free” ports on the original server can connect. With that, you have all possible connections you think, except for two ports that can’t make outbound connections because there are servers listening on them. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mn - 2&lt;/code&gt;. There can’t be more. Right?&lt;/p&gt;

&lt;h2 id=&quot;ok-but-whats-the-answer&quot;&gt;Ok, but what’s the answer?&lt;/h2&gt;

&lt;p&gt;You’re pretty happy with your answer. But you want to be sure. Maybe it’s possible two more connections to get the full &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mn&lt;/code&gt; connections, and you’ve missed something minor. Those last two connections are the difference between someone who can think of good answers and someone who knows answers, you muse.&lt;/p&gt;

&lt;p&gt;You hit up your favorite online Q&amp;amp;A site, and find the answer:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2024-06-08-how-many-tcp-connections/answer.svg&quot; alt=&quot;the answer&quot; style=&quot;max-height: 300px;&quot; class=&quot;centered&quot; /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m^2 * n^2&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;What?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;How&lt;/em&gt; is that even possible?&lt;/p&gt;

&lt;h3 id=&quot;the-answer-in-theory&quot;&gt;The answer, in theory&lt;/h3&gt;

&lt;p&gt;If you go searching around at all, you will find the mantra of disambiguating a TCP connection:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;A TCP connection is
identified by the 5-tuple of
(
  protocol,
  source ip,
  source port,
  destination ip,
  destination port
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Taking this as gospel, it is clear how we get to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m^2*n^2&lt;/code&gt; figure: we just multiply through by each of the 4 variable parts in turn (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;protocol&lt;/code&gt; is assumed to be fixed to TCP).&lt;/p&gt;

&lt;p&gt;This is, to me, both highly intuitive as well as kind of weird.&lt;/p&gt;

&lt;p&gt;It is intuitive as that’s how connections are tracked anywhere we deal with TCP. It’s how TCP connections are thought of when setting up &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iptables&lt;/code&gt; rules; it’s how TCP connections are thought of during &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tcpdump&lt;/code&gt;; it’s how TCP connections are set up when binding them to sockets.&lt;/p&gt;

&lt;p&gt;It’s kind of weird because we never think of TCP this way when writing apps. When we write a server-client application, we almost always assume the clients socket belongs exclusively to the server. This is something lost in the abstraction between L4 and L7, and possibly rightfully so! The client handles the port sharing on its end, and that’s something we don’t have to care about on the server, so why think about it at all?&lt;/p&gt;

&lt;p&gt;Given you may never have seen this in the wild though, you may ask:&lt;/p&gt;

&lt;h3 id=&quot;but-is-that-even-actually-possible&quot;&gt;But is that even actually possible?&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;PS: Please go to &lt;a href=&quot;https://github.com/vaishnavsm/blog-tcp-connection-limit&quot;&gt;this repo&lt;/a&gt; for instructions on how to run this yourself. Things feel a lot more real if you actually run these yourself!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As a matter of fact, yes it is!
To prove that this is possible, we need to show that if we change any of the four parameters in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(source ip, source port, destination ip, destination port)&lt;/code&gt;, we can create a new connection. Out of these, a few are trivial:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;If you change &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;source ip&lt;/code&gt;, it’s equivalent to connecting from a different machine, so there’s not much to test out there.&lt;/li&gt;
  &lt;li&gt;If you change &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;source port&lt;/code&gt;, it’s equivalent to a “new connection” on the same machine, so there’s nothing to test out there either.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These are situations where different clients connect to the same server.&lt;/p&gt;

&lt;p&gt;What we are left to prove is:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Given a fixed &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(source ip, source port, destination ip)&lt;/code&gt;, we can connect to multiple &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;destination ports&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Given a fixed &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(source ip, source port, destination port)&lt;/code&gt;, we can connect to multiple &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;destination ips&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These are situations where the same “socket” (ie &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;source ip, source port&lt;/code&gt; pair) make a connection to two different servers. In a way, it’s the opposite of how a server accepts connections from multiple clients.&lt;/p&gt;

&lt;h4 id=&quot;test-setup&quot;&gt;Test Setup&lt;/h4&gt;
&lt;p&gt;We have a server and a client&lt;/p&gt;

&lt;p&gt;Importantly, the client creates a socket with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SO_REUSEADDR&lt;/code&gt; option set. This allows multiple clients to connect to the same &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(source ip, source port)&lt;/code&gt; combo.&lt;/p&gt;

&lt;h4 id=&quot;testing-for-multiple-destination-ports&quot;&gt;Testing for multiple destination ports&lt;/h4&gt;
&lt;p&gt;We spin up two listeners on two different ports (6001 and 6002), and spin up two connectors on the same port (6000), fixing all ips on loopback.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2024-06-08-how-many-tcp-connections/diffport.png&quot; alt=&quot;multiple destination port demo&quot; class=&quot;centered&quot; /&gt;
Success! Both the servers are getting requests from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;127.0.0.1:6000&lt;/code&gt;, but they have different data being echoed back!&lt;/p&gt;

&lt;h4 id=&quot;testing-for-multiple-destination-ips&quot;&gt;Testing for multiple destination ips&lt;/h4&gt;
&lt;p&gt;We spin up two listeners on two different ips (loopback and local lan ip) but the same port, and spin two connectors on the same port (6000).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2024-06-08-how-many-tcp-connections/diffips.png&quot; alt=&quot;multiple destination ip demo&quot; class=&quot;centered&quot; /&gt;
Success! Both the servers are getting requests from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;127.0.0.1:6000&lt;/code&gt;, but they have different data being echoed back again!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You may want to &lt;a href=&quot;https://github.com/vaishnavsm/blog-tcp-connection-limit&quot;&gt;play around&lt;/a&gt; with interesting cases yourself! Some suggested experiments are included in the README over on Github.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;practical-considerations&quot;&gt;Practical Considerations&lt;/h2&gt;

&lt;p&gt;Let’s punch in some numbers.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;n = ip space ~ 2 ^ 32
m ~ 2 ^ 16

total number of connections =  ( 2 ^ 32 * 2^16 ) ^ 2 = 2^96 ~ 8*10^28
ie, possible total number of connections = 80 billion billion billion
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Of course, that’s not practically possible. You will run into other limitations far before you reach anything close to that number.&lt;/p&gt;

&lt;p&gt;Some of them are:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;The number of connections your CPU can handle, especially given TLS today&lt;/li&gt;
  &lt;li&gt;The number of file descriptors that can be open at a time (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ulimit&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;The number of file descriptions that you can store in memory&lt;/li&gt;
  &lt;li&gt;The time needed to open that many connections 🤣&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;However, this is more meant to be a theoretical explanation, so let’s leave it at that!&lt;/p&gt;</content><author><name>Vaishnav Sreekanth Menon</name></author><category term="Questions" /><category term="TCP" /><summary type="html"></summary></entry><entry><title type="html">A Practical TLS Handshake Walkthrough</title><link href="https://vaishnavsm.com/2024-01-14-a-practical-tls-handshake-walkthrough/" rel="alternate" type="text/html" title="A Practical TLS Handshake Walkthrough" /><published>2024-01-14T00:00:00-06:00</published><updated>2024-01-14T00:00:00-06:00</updated><id>https://vaishnavsm.com/a-practical-tls-handshake-walkthrough</id><content type="html" xml:base="https://vaishnavsm.com/2024-01-14-a-practical-tls-handshake-walkthrough/">&lt;h1 id=&quot;what-is-tls&quot;&gt;What is TLS?&lt;/h1&gt;

&lt;p&gt;TLS, or Transport Layer Security, is an encryption and authentication protocol that’s designed to keep your data safe when browsing. It’s the S in HTTPS, FTPS, and one of the S-es in SMTPS. It’s what allows the padlock in the browser to padlock. The TLS protocol natively works with anything that runs on the TCP protocol. This is why you see TLS all over the place!&lt;/p&gt;

&lt;p&gt;A TLS session is established right after the TCP connection is established, and before any application-protocol level (Read, HTTP, FTP, etc) shenanigans start. This ensures that anything that happens in the application layer is automatically encrypted from the beginning. This session establishment happens with a process called a TLS Handshake.&lt;/p&gt;

&lt;p&gt;We won’t delve too deep into TLS settings itself. Instead, the rest of this post will go through the TLS handshake, and try to simulate it manually using OpenSSL, so we can get a &lt;em&gt;feel&lt;/em&gt; of what it actually does. I hope you find this helpful!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Aside:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I will be using RSA throughout this article to refer to the concept of asymmetric-key based encryption protocols in general, and AES to refer to the concept of symmetric key based encryption protocols. Is is 100% possible to switch out both these in TLS. You can even use a different key exchange algorithm. For example, you can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tls_ecdhe_ecdsa_with_chacha20_poly1305_sha256&lt;/code&gt; - which uses the Elliptic Curve Diffie Hellman key exchange (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ecdhe&lt;/code&gt;) instead of RSA or standard DH , with the Elliptic Curve Digital Signature Algorithm (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ecdsa&lt;/code&gt;) instead of RSA, and ChaCha20-Poly1305 (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chacha20_poly1305&lt;/code&gt;) instead of AES.&lt;/p&gt;

&lt;h2 id=&quot;side-quest-why-do-we-need-to-make-an-aes-based-tunnel&quot;&gt;Side Quest: Why do we need to make an AES based tunnel?&lt;/h2&gt;

&lt;p&gt;If you wonder why TLS uses RSA for digital signatures, but then uses that to make an AES based tunnel instead of just using the RSA algorithm itself for the tunnel, you’re not alone!&lt;/p&gt;

&lt;p&gt;A cursory browse of this question may lead you to believe that it’s because RSA is slower, meant to be used on fixed or small sizes of data, or that it adds unnecessary overhead. If you drill a bit deeper into RSA vs AES, you may even find that using RSA in block cipher mode is nebulously “insecure.” Scary! Even if we ask our lord and saviour ChatGPT, it answers thusly:
&lt;img src=&quot;/assets/img/posts/2024-01-14-a-practical-tls-handshake-walkthrough/chatgpt-tls-rsa-aes.png&quot; alt=&quot;ChatGPT&apos;s Answer&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But Beware! All is not as it seems!&lt;/p&gt;

&lt;p&gt;The simplest reason why you can’t use RSA to encrypt the connection directly is straightforward, almost &lt;em&gt;annoyingly&lt;/em&gt; so: RSA is asymmetric, so you can only encrypt data from the client to the server! Anything the server sends back to the client will be public knowledge. Not exactly secure now, is it?&lt;/p&gt;

&lt;p&gt;The asymmetric part of TLS is not for encryption, but for the client to verify that it is actually talking to the correct server. For example, the Diffie Hellman key exchange does &lt;strong&gt;not&lt;/strong&gt; rely on a private channel to create the shared symmetric key. You can perform DH by literally shouting out the values to each other, and no one else will be able to “break” or listen in to your secrets. When you’re shouting, however, you can see the person shouting back, you can listen to the intonation of their voice, and confirm that it is the person you actually want to talk with. The RSA in TLS ensures the same thing.&lt;/p&gt;

&lt;p&gt;In theory, though, you could construct a Mutual-TLS connection, where the client and server authenticate with each other using an extension of the below TLS handshake. In this case, the server can use the client public key to encrypt messages to the client, and the client can use the server certificates to encrypt data to the client. Why do we not do this? The &lt;em&gt;simplest&lt;/em&gt; reason is that mTLS is usually not used between clients and servers, as setting up mTLS requires a lot of work on the client end. When it is used, it’s usually used between services within a company, or to authenticate clients between companies where high-trust and security are needed. Wait a second… Communications between services within a company can be much more complex and numerous than between end clients and the server, so we probably want to increase the performance by using faster algorithms and algoritms that have smaller keys. Also, if we want high security, we would probably like to have Forward Secrecy by having transient secrets. Looks like ChatGPT was thinking a couple steps ahead on this one!&lt;/p&gt;

&lt;p&gt;In my mind, simply knowing that TLS uses AES for encryption due to performance, forward secrecy, etc isn’t good enough. The road that tells you how you get to that point is equally important!&lt;/p&gt;

&lt;h1 id=&quot;setting-up-the-lab-environment&quot;&gt;Setting up the Lab Environment&lt;/h1&gt;
&lt;p&gt;The lab environment is pretty simple for now:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;A folder each for the certificate authority, the server, and the client&lt;/li&gt;
  &lt;li&gt;OpenSSL CLI installed&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bash/zsh&lt;/code&gt; environment&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some conventions I will follow are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Whenever a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#Lab&lt;/code&gt; codeblock is reached, the assumption is that you are starting at the root of the lab.&lt;/li&gt;
  &lt;li&gt;Files that end in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.pem&lt;/code&gt; are public&lt;/li&gt;
  &lt;li&gt;Files that end in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.key&lt;/code&gt; are private&lt;/li&gt;
  &lt;li&gt;Files that end in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.bin&lt;/code&gt; are binary, and are also private&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We also set up a few bash functions to make things clearer moving forward. Please note that variables defined in one block of the lab may be used in other blocks as well!
Feel free to set this up within a Docker container, if you need to.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Lab&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;ca server client

&lt;span class=&quot;c&quot;&gt;# Function definitions&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Feel free to analyse these if you want, &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# but their implementations aren&apos;t too relevant&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# converts a number to a hexadecimal representation&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# num_to_hex $number $number_of_bytes&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;num_to_hex &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;%0.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$((&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;x&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# counts the number of bytes in a hex string&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;hexstrlen &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$((&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;wc&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;tr&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos; &apos;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# formats a variable size hex string&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# a variable size data structure has the first two bytes describing the length of the data&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# followed by the data itself&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;format_variable_size_hex_str &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;num_to_hex &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;hexstrlen &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt; 2&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# converts a hex string to bytes&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;hex_to_bytes &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; |  xxd &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# converts bytes from a file to a hex string&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;bytes_file_to_hex &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;od&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; n &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; x1 | &lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;s/ *//g&apos;&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;tr&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;\n&apos;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# converts bytes from a file to a hex string&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# bytes_file_block_to_hex $file $offset_bytes $block_size_bytes&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;bytes_file_block_to_hex &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;od&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; n &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; x1 &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$2&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-N&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$3&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;s/ *//g&apos;&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;tr&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;\n&apos;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# converts str to a hex string&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;str_to_hex &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;od&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; n &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; x1 | &lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;s/ *//g&apos;&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;tr&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;\n&apos;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# function repeat a string a given number of times&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# repeat_times $str $times&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;repeat_times &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;%.0s&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;1..&lt;span class=&quot;nv&quot;&gt;$2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;the-tls-workflow&quot;&gt;The TLS Workflow&lt;/h1&gt;

&lt;h2 id=&quot;prelude-setting-up-the-server&quot;&gt;Prelude: Setting Up The Server&lt;/h2&gt;

&lt;p&gt;Before a client connects to the server, we need to actually set up the server! Now, our server is pretty magical, in that it will be driven by shell commands, such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cp&lt;/code&gt; to send data from the server to the client. Since we’re talking about TLS though, we do need to generate a certificate and get it signed by a CA.&lt;/p&gt;

&lt;h3 id=&quot;the-certificate-authority&quot;&gt;The Certificate Authority&lt;/h3&gt;

&lt;p&gt;Generating the CA is pretty simple - we just make a private key and certificate pair.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Lab, CA&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;ca

&lt;span class=&quot;c&quot;&gt;# Generate the private key for the CA&lt;/span&gt;
openssl genrsa &lt;span class=&quot;nt&quot;&gt;-out&lt;/span&gt; ca.key 2048 

&lt;span class=&quot;c&quot;&gt;# Generate the CA certificate&lt;/span&gt;
openssl req &lt;span class=&quot;nt&quot;&gt;-x509&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-new&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-nodes&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-key&lt;/span&gt; ca.key &lt;span class=&quot;nt&quot;&gt;-sha256&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-days&lt;/span&gt; 1825 &lt;span class=&quot;nt&quot;&gt;-out&lt;/span&gt; cacert.pem

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;generating-a-server-certificate&quot;&gt;Generating a server certificate&lt;/h3&gt;

&lt;p&gt;The server needs to generate its own private key, and get it signed by the CA. To do this, it generates a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Certificate Signing Request&lt;/code&gt; (CSR) and some extension data with (importantly) the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;digitalSignature&lt;/code&gt; attribute, some extra subject names (SANs), etc, and sends it to the CA. The CA verifies that the server is legit, that it does indeed control the DNSes that the server says it owns, and generates a signed certificate for the server and sends it back.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Lab&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Server&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;server

&lt;span class=&quot;c&quot;&gt;# Generate the private key&lt;/span&gt;
openssl genrsa &lt;span class=&quot;nt&quot;&gt;-out&lt;/span&gt; server.key 2048

&lt;span class=&quot;c&quot;&gt;# generate a Certificate Signing Request (CSR)&lt;/span&gt;
openssl req &lt;span class=&quot;nt&quot;&gt;-new&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-key&lt;/span&gt; server.key &lt;span class=&quot;nt&quot;&gt;-out&lt;/span&gt; csr.pem &lt;span class=&quot;nt&quot;&gt;-sha256&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# generate extension file using HEREDOC&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; extension.txt &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
authorityKeyIdentifier=keyid,issuer
keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment
subjectAltName = @sans
[sans]
DNS.1 = vaishnavsm.com
DNS.2 = www.vaishnavsm.com
DNS.3 = *.vaishnavsm.com
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF

&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# send the CSR to the CA&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cp &lt;/span&gt;csr.pem extension.txt ../ca/

&lt;span class=&quot;c&quot;&gt;# ------------&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# CA&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ../ca

&lt;span class=&quot;c&quot;&gt;# view the CSR and verify that everything is ok&lt;/span&gt;
openssl req &lt;span class=&quot;nt&quot;&gt;-text&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-noout&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-verify&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-in&lt;/span&gt; csr.pem

&lt;span class=&quot;c&quot;&gt;# Create signed certificate&lt;/span&gt;
openssl x509 &lt;span class=&quot;nt&quot;&gt;-req&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-in&lt;/span&gt; csr.pem &lt;span class=&quot;nt&quot;&gt;-CA&lt;/span&gt; cacert.pem &lt;span class=&quot;nt&quot;&gt;-CAkey&lt;/span&gt; ca.key &lt;span class=&quot;nt&quot;&gt;-CAcreateserial&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-out&lt;/span&gt; cert.pem &lt;span class=&quot;nt&quot;&gt;-days&lt;/span&gt; 825 &lt;span class=&quot;nt&quot;&gt;-sha256&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-extfile&lt;/span&gt; extension.txt

&lt;span class=&quot;c&quot;&gt;# View certificate&lt;/span&gt;
openssl x509 &lt;span class=&quot;nt&quot;&gt;-text&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-noout&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-in&lt;/span&gt; cert.pem

&lt;span class=&quot;c&quot;&gt;# Send certificate back to server&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cp &lt;/span&gt;cert.pem ../server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;creating-the-connection&quot;&gt;Creating The Connection&lt;/h2&gt;
&lt;h3 id=&quot;the-tls-12-handshake&quot;&gt;The TLS (1.2) Handshake&lt;/h3&gt;

&lt;p&gt;The TLS handshake is the process through which two parties negotiate the encrypted TLS tunnel. It goes:&lt;/p&gt;

&lt;h4 id=&quot;1-client-hello&quot;&gt;1. Client Hello&lt;/h4&gt;

&lt;p&gt;The client sends a message to the server, indicating that it wants to establish the TLS connection.
This includes:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Information about the highest TLS version the client supports (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;client_version&lt;/code&gt;).&lt;/li&gt;
  &lt;li&gt;The current GMT UNIX timestamp (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gmt_unix_time&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;28 cryptographically random bytes (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;random_bytes&lt;/code&gt;). I used &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;openssl rand -hex 28&lt;/code&gt; to generate the random bytes.&lt;/li&gt;
  &lt;li&gt;The session id, if a previous session id is to be continued (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;session_id&lt;/code&gt;). This is empty as we want to negotiate a new connection&lt;/li&gt;
  &lt;li&gt;The cipher suites that the client supports (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cipher_suites&lt;/code&gt;). We specify &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{ 0x00,0x6B }&lt;/code&gt;, which is the code for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TLS_DHE_RSA_WITH_AES_256_CBC_SHA256&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;The compression methods to use (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;compression_methods&lt;/code&gt;). We specify &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;, which is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NULL&lt;/code&gt; compression method.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Client to Server: &lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;msg_type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ClientHello&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;lt;message size&amp;gt;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;client_version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;major&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;minor&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;gmt_unix_time&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;1705212000&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;random_bytes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b05595ec06fa079fb2ef7b618b7cdf7fb8234b5a411c505d6f5c30e6&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;session_id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;lt;empty&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;cipher_suites&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;0x00&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;0x6B&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;compression_methods&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Lab, Client&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# We just set up the values of the randoms here - This will be used in the future&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Note that there are a total of 32 bytes in the random:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 4 from the timestamp and 28 from the random data&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;CLIENT_TS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1705212000
&lt;span class=&quot;nv&quot;&gt;CLIENT_RANDOM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;b05595ec06fa079fb2ef7b618b7cdf7fb8234b5a411c505d6f5c30e6
&lt;span class=&quot;nv&quot;&gt;FULL_CLIENT_RANDOM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;num_to_hex &lt;span class=&quot;nv&quot;&gt;$CLIENT_TS&lt;/span&gt; 4&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CLIENT_RANDOM&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Aside:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Why is the version &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{ major: 3, minor: 3 }&lt;/code&gt; if we are talking about TLS 1.2?&lt;/p&gt;

&lt;p&gt;TLS 1.0 was considered a minor revision of SSL 3.0 (which was &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;major: 3, minor: 0&lt;/code&gt;). 
So, TLS 1.0 is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;major: 3, minor: 1&lt;/code&gt;, and the count continues from there.&lt;/p&gt;

&lt;h4 id=&quot;2-server-hello&quot;&gt;2. Server Hello&lt;/h4&gt;

&lt;p&gt;The server responds with its own hello, making choices from the options the client has provided:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;server_version&lt;/code&gt; contains the highest TLS version compatible by both the client and the server&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;random&lt;/code&gt; contains the servers own set of random bytes and timestamp.  I used &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;openssl rand -hex 28&lt;/code&gt; to generate the random bytes.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;session_id&lt;/code&gt; is empty, telling the client that the session will not be cached. TLS session caching is a topic for another time.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cipher_suite&lt;/code&gt; contains the cipher suite that has been selected. Since the client only gave one option, and it’s an option the server supports, it selects this and sends it back.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;compression_method&lt;/code&gt; contains the compression method selected.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Server to Client&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;msg_type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ServerHello&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;lt;message size&amp;gt;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;server_version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;major&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;minor&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;}&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;gmt_unix_time&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;1705212010&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;random_bytes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c80d5017a2edec7f8d7daf0aa4b1860b58fff7dbfc3ba004c66a314e&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;session_id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;lt;empty&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;cipher_suite&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;0x00&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;0x6B&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;}&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;compression_method&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Lab, Server&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# We just set up the values of the randoms here - This will be used in the future&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Note that there are a total of 32 bytes in the random:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 4 from the timestamp and 28 from the random data&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;SERVER_TS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1705212010
&lt;span class=&quot;nv&quot;&gt;SERVER_RANDOM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;c80d5017a2edec7f8d7daf0aa4b1860b58fff7dbfc3ba004c66a314e
&lt;span class=&quot;nv&quot;&gt;FULL_SERVER_RANDOM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;num_to_hex &lt;span class=&quot;nv&quot;&gt;$SERVER_TS&lt;/span&gt; 4&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$SERVER_RANDOM&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;3-server-certificate&quot;&gt;3. Server Certificate&lt;/h4&gt;

&lt;p&gt;Immediately after the Server Hello, the server sends its certificate to the client.
The certificate is sent as an x.509v3 certificate. We simulate this in the lab using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cp&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Server to Client&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;msg_type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Certificate&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;lt;message length&amp;gt;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;certificate_list&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;lt;certificate chain obtained after signing&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Lab Action&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# This is the data sent via `certificate_list` above&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cp &lt;/span&gt;server/cert.pem client/cert.pem
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;4-server-key-exchange-message&quot;&gt;4. Server Key Exchange Message&lt;/h4&gt;

&lt;p&gt;Since Diffie Hellman Ephemeral (DHE) requires parameters to be sent over what is in the certificate, the server sends this next.&lt;/p&gt;

&lt;p&gt;In the lab, we generate the DHE parameters using openssl, as shown below. The server generates both the public prime and generator values for DH, and also its own private prime and the corresponding public key using the generated prime and generator.&lt;/p&gt;

&lt;p&gt;The message also includes a signed hash. This signed hash is what prevents an attacker from simply serving you the (public) certificate of the server and pretending to be the server, as it’s impossible to digitally sign data without the private key. Note that until this step, nothing has been digitally signed by the server! This will occur at different points during the key exchange step, but the server will either send some digitally signed data to the client, or the client will send some encrypted data to the server to prevent this attack. The signed value contains the full random sent by both the client and server in the corresponding Hellos (32 bytes = 4 byte timestamp + 28 random bytes each), appended with the bytes in the params struct. The random bytes prevent replay attacks. Note that the params struct has variable sized values for the DH parameters, so the data sent to the hash will be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;random bytes + size of dh_p (2 bytes) + raw bytes of dh_p + size of dh_g (2 bytes) + raw bytes of dh_g + size of dh_Ys + raw bytes of dh_Ys&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Lab, Server&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;server
&lt;span class=&quot;c&quot;&gt;# this can take some time!&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# this is usually done in advance, in most real world scenarios&lt;/span&gt;
openssl dhparam &lt;span class=&quot;nt&quot;&gt;-out&lt;/span&gt; dhparam.pem 2048

&lt;span class=&quot;c&quot;&gt;# view the parameters&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# these are the prime and generator values,&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# which will be common between the server and client&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# and the server sends this to the client to use&lt;/span&gt;
openssl dhparam &lt;span class=&quot;nt&quot;&gt;-in&lt;/span&gt; dhparam.pem &lt;span class=&quot;nt&quot;&gt;-text&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-noout&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# generate the private key for the server&lt;/span&gt;
openssl genpkey &lt;span class=&quot;nt&quot;&gt;-paramfile&lt;/span&gt; dhparam.pem &lt;span class=&quot;nt&quot;&gt;-out&lt;/span&gt; dhserver.key

&lt;span class=&quot;c&quot;&gt;# get the public (g^(Ys) mod P, with g and P as given above) value for the server&lt;/span&gt;
openssl pkey &lt;span class=&quot;nt&quot;&gt;-in&lt;/span&gt; dhserver.key &lt;span class=&quot;nt&quot;&gt;-pubout&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-out&lt;/span&gt; dhserver.pem

&lt;span class=&quot;c&quot;&gt;# view the parameters&lt;/span&gt;
openssl pkey &lt;span class=&quot;nt&quot;&gt;-in&lt;/span&gt; dhserver.key &lt;span class=&quot;nt&quot;&gt;-text&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-noout&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Outputs:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# DH Private-Key: (2048 bit)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# private-key:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#     54:b1:7a:fc:e0:3e:06:15:92:b1:81:f2:47:54:0f:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#     ...&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# public-key:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#     00:b8:e9:ff:59:ba:8d:48:49:b5:00:99:d0:cc:a4:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#     ...&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# P:   &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#     00:dd:cf:3f:e8:43:db:cf:79:33:7d:27:4d:99:d3:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#     ...&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# G:    2 (0x2)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# generate signature&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# This function extracts the hex block between two lines from the above parameters&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;extract_hex_from_params_between_lines &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    openssl pkey &lt;span class=&quot;nt&quot;&gt;-in&lt;/span&gt; dhserver.key &lt;span class=&quot;nt&quot;&gt;-text&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-noout&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/,/&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$2&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/p&quot;&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;tail&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; +2 | &lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;$ d&apos;&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;tr&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;:\n &apos;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;DATA_DH_P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;extract_hex_from_params_between_lines &lt;span class=&quot;s2&quot;&gt;&quot;P:&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;G:&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;DATA_DH_YS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;extract_hex_from_params_between_lines &lt;span class=&quot;s2&quot;&gt;&quot;public-key:&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;P:&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;DATA_DH_G&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;2 &lt;span class=&quot;c&quot;&gt;# Copy this from the params yourself :)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# note: we will use this in the client too when verifying&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# all the data here is public!&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;DATA_TO_HASH_HEX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;FULL_CLIENT_RANDOM&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;FULL_SERVER_RANDOM&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;format_variable_size_hex_str &lt;span class=&quot;nv&quot;&gt;$DATA_DH_P&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)$(&lt;/span&gt;num_to_hex &lt;span class=&quot;nv&quot;&gt;$DATA_DH_G&lt;/span&gt; 1&lt;span class=&quot;si&quot;&gt;)$(&lt;/span&gt;format_variable_size_hex_str &lt;span class=&quot;nv&quot;&gt;$DATA_DH_YS&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
hex_to_bytes &lt;span class=&quot;nv&quot;&gt;$DATA_TO_HASH_HEX&lt;/span&gt; | openssl dgst &lt;span class=&quot;nt&quot;&gt;-sha256&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-sign&lt;/span&gt; server.key &lt;span class=&quot;nt&quot;&gt;-out&lt;/span&gt; keyexchange.sign

&lt;span class=&quot;c&quot;&gt;# simulate send of parameters and public key to the server&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# as done in `params` below&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cp &lt;/span&gt;dhparam.pem ../client
&lt;span class=&quot;nb&quot;&gt;cp &lt;/span&gt;dhserver.pem ../client
&lt;span class=&quot;nb&quot;&gt;cp &lt;/span&gt;keyexchange.sign ../client
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Server to Client&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;msg_type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ServerKeyExchange&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;lt;message length&amp;gt;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;dh_p&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;lt;prime number value from dhparam.pem in lab&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;dh_g&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;lt;generator value from dhparam.pem in lab, probably 2&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;dh_Ys&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;lt;public key from dhserver.pem in lab&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;signed_params&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;algorithm&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; 
            &lt;span class=&quot;na&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# sha256&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;signature&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# rsa&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;signature&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;RSA_SIGN(SHA256(client_random+server_random+params))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Aside:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;What is the difference between the cipher suites with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DH&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DHE&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DH&lt;/code&gt; is (implicit) Diffie Hellman, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DHE&lt;/code&gt; is Diffie Hellman Ephemeral. The difference is that in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DH&lt;/code&gt;, the public key of the server itself is a Diffie Hellman public key, that is then signed by the CA. This means that if you use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DH&lt;/code&gt;, then every time the same keypair is used by the client, the shared secret will be the same. On the other hand, in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DHE&lt;/code&gt;, the server’s public key is an RSA key and has nothing to do with the Diffie Hellman params. In practice, the Diffie Hellman parameters (Prime and Generator, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dh_p&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dh_g&lt;/code&gt; above) are generated in advance and given to the server (and is often not rotated at all!), and the server generates transient key-pairs on the server side (the private key and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dh_Ys&lt;/code&gt; above), which is then sent over while negotiation.&lt;/p&gt;

&lt;p&gt;Security wise, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DH&lt;/code&gt; does not offer forward secrecy, while &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DHE&lt;/code&gt; does. Please see the Side Quest after this section to learn more!&lt;/p&gt;

&lt;h4 id=&quot;5-server-hello-done&quot;&gt;5. Server Hello Done&lt;/h4&gt;

&lt;p&gt;The server says it’s done with its turn.&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Server to Client&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;msg_type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ServerHelloDone&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;lt;message length&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;6-client-verifies-certificate&quot;&gt;6. Client Verifies Certificate&lt;/h4&gt;

&lt;p&gt;The client checks the certificate to see that it matches the domain the URL is coming from, that it is currently valid, and that it is signed by a CA that it trusts.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Lab, Client&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;client

&lt;span class=&quot;c&quot;&gt;# get the CA certificate&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cp&lt;/span&gt; ../ca/cacert.pem ./

&lt;span class=&quot;c&quot;&gt;# verify that the cert is trusted by the ca&lt;/span&gt;
openssl verify &lt;span class=&quot;nt&quot;&gt;-verbose&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-CAfile&lt;/span&gt; cacert.pem  cert.pem

&lt;span class=&quot;c&quot;&gt;# verify that the name matches the SAN on the cert (manually)&lt;/span&gt;
openssl x509 &lt;span class=&quot;nt&quot;&gt;-text&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-noout&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-in&lt;/span&gt; cert.pem

&lt;span class=&quot;c&quot;&gt;# extract the public key from the certificate&lt;/span&gt;
openssl x509 &lt;span class=&quot;nt&quot;&gt;-pubkey&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-in&lt;/span&gt; cert.pem &lt;span class=&quot;nt&quot;&gt;-noout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; server.pem

&lt;span class=&quot;c&quot;&gt;# verify the signed key exchange message&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# this proves that it is indeed the server that is sending the data,&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# not some man in the middle&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# note that $DATA_TO_HASH_HEX is being reused from the server&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# this is ok, since we can recreate it using the data sent by the server&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# I am leaving that out here for succinctness&lt;/span&gt;
hex_to_bytes &lt;span class=&quot;nv&quot;&gt;$DATA_TO_HASH_HEX&lt;/span&gt; | openssl dgst &lt;span class=&quot;nt&quot;&gt;-sha256&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-verify&lt;/span&gt; server.pem &lt;span class=&quot;nt&quot;&gt;-signature&lt;/span&gt; keyexchange.sign
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;7-client-computes-master-secret&quot;&gt;7. Client Computes Master secret&lt;/h4&gt;

&lt;p&gt;Since the client now trusts the server, it goes ahead and derives the master secret. For this, it generates its own DH keys, and uses the prime and generator values supplied by the server to negotiate a shared secret (the DH pre-master secret). Note that to do this, you need access to all the public data which the server shared, but also the private key on the client. This is what keeps the secret… secret!&lt;/p&gt;

&lt;p&gt;Explaining how the master secret is derived from the pre-master secret (the  value negotiated with DH) is a bit too involved to be added here, but it is pretty simple math, described succinctly in the TLS RFC in the &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc5246#section-8.1&quot;&gt;Computing the Master Secret&lt;/a&gt; section, with the PRF defined in &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc5246#section-5&quot;&gt;Section 5&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Lab, Client&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;client

&lt;span class=&quot;c&quot;&gt;# client has received dhparam.pem above&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# generate the client private&lt;/span&gt;
openssl genpkey &lt;span class=&quot;nt&quot;&gt;-paramfile&lt;/span&gt; dhparam.pem &lt;span class=&quot;nt&quot;&gt;-out&lt;/span&gt; dhclient.key
&lt;span class=&quot;c&quot;&gt;# and public&lt;/span&gt;
openssl pkey &lt;span class=&quot;nt&quot;&gt;-in&lt;/span&gt; dhclient.key &lt;span class=&quot;nt&quot;&gt;-pubout&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-out&lt;/span&gt; dhclient.pem

&lt;span class=&quot;c&quot;&gt;# take a look&lt;/span&gt;
openssl pkey &lt;span class=&quot;nt&quot;&gt;-in&lt;/span&gt; dhclient.key &lt;span class=&quot;nt&quot;&gt;-text&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-noout&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Generate shared secret (pre-master secret)&lt;/span&gt;
openssl pkeyutl &lt;span class=&quot;nt&quot;&gt;-derive&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-inkey&lt;/span&gt; dhclient.key &lt;span class=&quot;nt&quot;&gt;-peerkey&lt;/span&gt; dhserver.pem &lt;span class=&quot;nt&quot;&gt;-out&lt;/span&gt; pre_master.bin

&lt;span class=&quot;c&quot;&gt;# Derive master secret from pre-master secret&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;PRF_SECRET_HEX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;bytes_file_to_hex pre_master.bin&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;PRF_SEED_HEX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;str_to_hex &lt;span class=&quot;s1&quot;&gt;&apos;master secret&apos;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;FULL_CLIENT_RANDOM&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;FULL_SERVER_RANDOM&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

openssl pkeyutl &lt;span class=&quot;nt&quot;&gt;-kdf&lt;/span&gt; TLS1-PRF &lt;span class=&quot;nt&quot;&gt;-kdflen&lt;/span&gt; 48 &lt;span class=&quot;nt&quot;&gt;-pkeyopt&lt;/span&gt; md:SHA256 &lt;span class=&quot;nt&quot;&gt;-pkeyopt&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hexsecret:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PRF_SECRET_HEX&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-pkeyopt&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hexseed:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PRF_SEED_HEX&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-out&lt;/span&gt; master_secret.bin

&lt;span class=&quot;c&quot;&gt;# View the master secret&lt;/span&gt;
xxd master_secret.bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Aside:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Why do we not simply use the secret derived from DH (what is called the “pre-master secret” above) as the master secret?&lt;/p&gt;

&lt;p&gt;This is to abstract away the key exchange part of TLS from the encryption part of TLS.&lt;/p&gt;

&lt;p&gt;The idea is that the output of the key exchange step is always 48 bytes of data that is guaranteed to be the same shared secret between client and server. This way, the key exchange method itself can pass any data to the “pre-master to master secret conversion” step, and the output is standardized to the encryption step. The master secret derivation acts as the “API” between these steps.&lt;/p&gt;

&lt;h4 id=&quot;8-client-key-exchange-message&quot;&gt;8. Client Key Exchange Message&lt;/h4&gt;

&lt;p&gt;The client proceeds to send back the information about its public DH parameter to the server.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;msg_type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ClientKeyExchange&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;lt;message_length&amp;gt;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;exchange_keys&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;dh_public&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;lt;public key from dhclient.pem&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Lab, Client&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;client
&lt;span class=&quot;nb&quot;&gt;cp &lt;/span&gt;dhclient.pem ../server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;9-client-change-cipher-spec&quot;&gt;9. Client Change Cipher Spec&lt;/h4&gt;

&lt;p&gt;The client now sends a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ChangeCipherSpec&lt;/code&gt; message, which is a single byte message which just says that everything beyond this will use the negotiated cipher.
This is technically an entirely different type of message than a TLS Handshake message (ie, it does not fit in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Handshake&lt;/code&gt; struct and does not have an entry in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HandshakeType&lt;/code&gt;), even though it is conceptually part of the “TLS Handshake.”&lt;/p&gt;

&lt;p&gt;This is because of how TLS transmits data.&lt;/p&gt;

&lt;p&gt;SSL sends &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;messages&lt;/code&gt; that are encoded over &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;records&lt;/code&gt;. Several &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;messages&lt;/code&gt; of the same type can be sent in the same &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;record&lt;/code&gt;. For example, several &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Handshake&lt;/code&gt; messages can be sent in the same &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;record&lt;/code&gt;. However, a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ChangeCipherSpec&lt;/code&gt; message modifies the way the following messages are encoded! So, TLS forces a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ChangeCipherSpec&lt;/code&gt; message into its own single-message record to prevent confusion over where the changed cipher spec takes effect from.&lt;/p&gt;

&lt;h4 id=&quot;10-client-finished&quot;&gt;10. Client Finished&lt;/h4&gt;

&lt;p&gt;Finally (for the client), the client sends a Finished message. 
Note that this will now be encrypted with AES, as we have negotiated!
The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;handshake_messages&lt;/code&gt; used in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;verify_data&lt;/code&gt; is a concatenation of all the handshake messages received so far. The exact implementation isn’t super important here, just know that the server can also construct this and verify that the data is correct.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;msg_type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Finished&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;lt;message length&amp;gt;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;verify_data&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;PRF(master_secret, &quot;client finished&quot;, Hash(handshake_messages))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;11-server-computes-master-secret&quot;&gt;11. Server Computes Master secret&lt;/h4&gt;

&lt;p&gt;The server, having now received the public DH parameters of the client, has everything it needs to compute the shared secret itself.
Note that we’re using the private secret of the server, and the public parameter of the client!&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Lab, Server&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;server

&lt;span class=&quot;c&quot;&gt;# Generate shared secret (pre-master secret)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# note that we are using the server secret and the client public now&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# this should be the same as the client!&lt;/span&gt;
openssl pkeyutl &lt;span class=&quot;nt&quot;&gt;-derive&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-inkey&lt;/span&gt; dhserver.key &lt;span class=&quot;nt&quot;&gt;-peerkey&lt;/span&gt; dhclient.pem &lt;span class=&quot;nt&quot;&gt;-out&lt;/span&gt; pre_master.bin

&lt;span class=&quot;c&quot;&gt;# Derive master secret from pre-master secret&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Since the pre-master secret will be the same for the client and server,&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# and all the other inputs below are also the same,&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# the resulting master will be the same as well&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;PRF_SECRET_HEX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;bytes_file_to_hex pre_master.bin&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;PRF_SEED_HEX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;str_to_hex &lt;span class=&quot;s1&quot;&gt;&apos;master secret&apos;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;FULL_CLIENT_RANDOM&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;FULL_SERVER_RANDOM&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

openssl pkeyutl &lt;span class=&quot;nt&quot;&gt;-kdf&lt;/span&gt; TLS1-PRF &lt;span class=&quot;nt&quot;&gt;-kdflen&lt;/span&gt; 48 &lt;span class=&quot;nt&quot;&gt;-pkeyopt&lt;/span&gt; md:SHA256 &lt;span class=&quot;nt&quot;&gt;-pkeyopt&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hexsecret:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PRF_SECRET_HEX&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-pkeyopt&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hexseed:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PRF_SEED_HEX&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-out&lt;/span&gt; master_secret.bin

&lt;span class=&quot;c&quot;&gt;# View the master secret&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# this should be the same as the client!&lt;/span&gt;
xxd master_secret.bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;12-server-change-cipher-spec-and-finished&quot;&gt;12. Server Change Cipher Spec and Finished&lt;/h4&gt;

&lt;p&gt;Similar to the client &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ChangeCipherSpec&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Finished&lt;/code&gt;, the server also sends the same data.
Note that the label in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;verify_data&lt;/code&gt; has changed.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;msg_type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Finished&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;lt;message length&amp;gt;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;verify_data&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;PRF(master_secret, &quot;server finished&quot;, Hash(handshake_messages))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And voila, you have a TCP connection encrypted with AES 256!&lt;/p&gt;

&lt;h3 id=&quot;side-quest-why-not-just-use-rsa-key-exchange&quot;&gt;Side Quest: Why not just use RSA Key Exchange?&lt;/h3&gt;
&lt;p&gt;Let me define terms here first:&lt;/p&gt;

&lt;p&gt;The goal of the Key Exchange step in TLS is to get a master secret in a standardized format. The idea is that this standardized master secret can be used as the seeding secret in whatever encryption algorithm we use later, no matter what you use to arrive at the master secret. You will usually hear Diffie Hellman (or an Elliptic Curve variant) being used for this.&lt;/p&gt;

&lt;p&gt;RSA is generally used as a signature in TLS - to prove that the data you’re sending does indeed come from you.
However, you can &lt;em&gt;also&lt;/em&gt; use RSA to send a client generated secret to the server (a “pre-master key”), using which you can derive a master secret. This is the &lt;em&gt;RSA Key Exchange&lt;/em&gt;. Remember, data can only be encrypted from the client to the server before the encrypted tunnel is set up, and the key exchange is needed to set up that tunnel!&lt;/p&gt;

&lt;p&gt;At first, this looks really nice! It doesn’t require any overhead in computing Diffie Hellman secrets, so it is more performant and efficient. However, its drawback is that it doesn’t offer Perfect Forward Secrecy. Very mysterious name, but a very simple concept:&lt;/p&gt;

&lt;p&gt;Imagine I am a hacker that’s trying to get your server data. I am working very hard to break into your server. I know this will take some time, so I record all the data that is going to your server in the mean time. They are all protected by TLS, so they are useless to me right now. One day, I finally get access to your server. I steal your private keys and get ready to pwn you. But you are smart, so you detect me, you kick me out, and you immediately replace all your private keys and certificates. Aw man, all that work, all for nothing!&lt;/p&gt;

&lt;p&gt;Or is it? I notice that you are using the RSA key exchange mode. This means that the secret that’s used for encryption comes only from the client generated secret. I can now decrypt this on &lt;em&gt;all of the TLS data that I was storing in the past&lt;/em&gt;, and read all the TLS-protected data I had stored earlier that I could not read before! If you had been using Diffie Hellman, this is not possible, since DH does not rely on a single secret to generate the master secret, it relies on &lt;em&gt;math&lt;/em&gt; done between two different values, which could even be public! I’m not getting into how this works, but there are excellent explanations of DH elsewhere. For example, this video on Diffie Hellman on &lt;a href=&quot;https://www.youtube.com/watch?v=M-0qt6tdHzk&quot;&gt;Khan Academy Labs&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;the-tls-13-handshake&quot;&gt;The TLS (1.3) Handshake&lt;/h3&gt;

&lt;p&gt;The TLS 1.3 Handshake is shorter and simpler than 1.2, basically combining several steps of TLS 1.2 together, amongst other changes.
We won’t explore this much here, but you should be armed with the knowledge to understand it, if you must.&lt;/p&gt;

&lt;h2 id=&quot;sending-data-over-tls&quot;&gt;Sending data over TLS&lt;/h2&gt;

&lt;h3 id=&quot;generating-aes-key-from-master-secret&quot;&gt;Generating AES Key from Master Secret&lt;/h3&gt;

&lt;p&gt;We skipped a little step in the TLS Handshake, which is where the master secret is expanded into the keys needed for encryption and MAC.
This is done using the same PRF function we used for deriving the master secret from the pre-master secret earlier, except we generate enough data for all our keys.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Lab, Client and Server&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;server
&lt;span class=&quot;c&quot;&gt;# Key Expansion&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;PRF_SECRET_HEX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;bytes_file_to_hex master_secret.bin&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;PRF_SEED_HEX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;str_to_hex &lt;span class=&quot;s1&quot;&gt;&apos;key expansion&apos;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;FULL_CLIENT_RANDOM&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;FULL_SERVER_RANDOM&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

openssl pkeyutl &lt;span class=&quot;nt&quot;&gt;-kdf&lt;/span&gt; TLS1-PRF &lt;span class=&quot;nt&quot;&gt;-kdflen&lt;/span&gt; 128 &lt;span class=&quot;nt&quot;&gt;-pkeyopt&lt;/span&gt; md:SHA256 &lt;span class=&quot;nt&quot;&gt;-pkeyopt&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hexsecret:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PRF_SECRET_HEX&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-pkeyopt&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hexseed:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PRF_SEED_HEX&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-out&lt;/span&gt; keys_expanded.bin

&lt;span class=&quot;c&quot;&gt;# Break the expanded keys into the required keys for AES_256_CBC_SHA_256 mode:&lt;/span&gt;
bytes_file_block_to_hex keys_expanded.bin 0 32 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; client_write_MAC_key.bin
bytes_file_block_to_hex keys_expanded.bin 32 32 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; server_write_MAC_key.bin
bytes_file_block_to_hex keys_expanded.bin 64 32 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; client_write_key.bin
bytes_file_block_to_hex keys_expanded.bin 96 32 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; server_write_key.bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;message-from-server-to-client&quot;&gt;Message From Server To Client&lt;/h3&gt;

&lt;p&gt;Let’s say the server wants to send a client a plaintext message: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HELLO WORLD&lt;/code&gt;. TLS itself does not care about the application layer protocol, and treats this text as simply a bunch of bytes.&lt;/p&gt;

&lt;p&gt;Each message is sent as arbitrary length &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;records&lt;/code&gt;, which is further split into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fragments&lt;/code&gt;. In our case, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HELLO WORLD&lt;/code&gt; fits into one fragment:&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# TLSPlaintext&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;23&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# application_data&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;major&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;minor&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;fragment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;HELLO WORLD&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We skip compression, because we have elected to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NULL&lt;/code&gt;. The data will look exactly the same as above, although of type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TLSCompressed&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We then encrypt the data. For this, we generate an IV, compute the HMAC, find the padding necessary to get the size of the message to a multiple of 16 (block size of AES256), and encrypt the data. We then send this data to the client.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# TLSCiphertext&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;23&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# application_data&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;major&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;minor&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;lt;length of below fragment&amp;gt;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;fragment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;IV&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;454e1fe2d1880c85766c3626f2a3386b&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;AES256 of-&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;HELLO WORLD&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;MAC&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;d1bda6d0c3273b00fa531e8424ff0f171536194e936b0d623dba19570f5035e5&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# HMAC(&amp;lt;server mac write key&amp;gt;, sequence_number + TLSCompressed.type + TLSCompressed.version + TLSCompressed.length + TLSCompressed.fragment)&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;0x05 0x05 0x05 0x05&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# this is the padding_length, repeated enough times to make the block 16 bytes&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;padding_length&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;0x05&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# data_raw: b60fbfec7c9a3acdb820eeeb52279cc5c3f321c690c833d6e4c71eba3db8b77f14ba9464c90e3bb9b3dbdae2c2c7e499af10bd2de59aaae5a40261827c7d9605aff259867cc2f38f98dc941bf836482cb85909c48227158182bc9fa3a1e3a5b6&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Lab, Server&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;server

&lt;span class=&quot;nv&quot;&gt;CONTENT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;HELLO WORLD&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;CONTENT_HEX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;str_to_hex &lt;span class=&quot;nv&quot;&gt;$CONTENT&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;DATA_TYPE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;num_to_hex 23 1&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# Hex of 23&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;DATA_VERSION_MAJOR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;num_to_hex 3 1&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;DATA_VERSION_MINOR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;num_to_hex 3 1&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# The format of this data is specified in the spec&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# the first number is the sequence number, which is assumed to be 0. It is 64 bits/8 bytes&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;HMAC_DATA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;num_to_hex 0 8&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;DATA_TYPE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;DATA_VERSION_MAJOR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;DATA_VERSION_MINOR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CONTENT_HEX&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Compute the HMAC&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# we need to cut since the sha produces output with some unnecessary text&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;DATA_HMAC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;hex_to_bytes &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$HMAC_DATA&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; | openssl sha256 &lt;span class=&quot;nt&quot;&gt;-mac&lt;/span&gt; HMAC &lt;span class=&quot;nt&quot;&gt;-macopt&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hexkey:&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;server_write_MAC_key.bin&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-hex&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;cut&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos; &apos;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; 2&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# See the HMAC value&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$DATA_HMAC&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Calculate Padding&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Divide HMAC data size by two as two hex characters form one byte of data&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;CONTENT_LENGTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;hexstrlen &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CONTENT_HEX&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;DATA_HMAC&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;PADDING_LENGTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$((&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$CONTENT_LENGTH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;PADDING_HEX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;num_to_hex &lt;span class=&quot;nv&quot;&gt;$PADDING_LENGTH&lt;/span&gt; 1&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;PADDING&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;repeat_times &lt;span class=&quot;nv&quot;&gt;$PADDING_HEX&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$PADDING_LENGTH&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# This is the data we need to encrypt&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ENC_CONTENT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CONTENT_HEX&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;DATA_HMAC&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PADDING&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Generate the initialization vector for the CBC&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;IV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;openssl rand &lt;span class=&quot;nt&quot;&gt;-hex&lt;/span&gt; 16&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Encrypt the data using the server write key&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ENC_CONTENT&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; | openssl enc &lt;span class=&quot;nt&quot;&gt;-aes-256-cbc&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-nosalt&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-K&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;server_write_key.bin&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-iv&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$IV&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-nopad&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-out&lt;/span&gt; request.enc 

&lt;span class=&quot;c&quot;&gt;# Send request to client&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cp &lt;/span&gt;request.enc ../client
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;On the other side, we decrypt this data and decode it using the known format. Since we know where the key comes from, and the IV is given in the message itself, you should be able to figure out how to do this! 😄️&lt;/p&gt;

&lt;p&gt;That’s about it! Perhaps later, I can write notes about how this works with UDP and QUIC/HTTP3, but this article is long enough as-is.&lt;/p&gt;</content><author><name>Vaishnav Sreekanth Menon</name></author><category term="Walkthroughs" /><category term="Security" /><summary type="html">What is TLS?</summary></entry><entry><title type="html">Redis Hash Slot Failure via Topology</title><link href="https://vaishnavsm.com/2024-01-01-redis-hash-slot-failure-via-topology/" rel="alternate" type="text/html" title="Redis Hash Slot Failure via Topology" /><published>2024-01-01T00:00:00-06:00</published><updated>2024-01-01T00:00:00-06:00</updated><id>https://vaishnavsm.com/redis-hash-slot-failure-via-topology</id><content type="html" xml:base="https://vaishnavsm.com/2024-01-01-redis-hash-slot-failure-via-topology/">&lt;p&gt;One of the (many) problems with running a production grade Redis cluster in my experience has been maintaining the topology of the cluster.&lt;/p&gt;

&lt;p&gt;What’s that? When you run Redis in Cluster mode, you run several processes of Redis [aside: upto 1 per core, and upto ~80% RAM utilization total, in my experience is the maximum before you end up having to face the dreaded issues with RAM overusage when dumps are created, leading to crashes], with each process being either run in master mode, or run as a replica of a master, and with each master assigned a fixed hash slot.&lt;/p&gt;

&lt;p&gt;There are two reasons why you run in cluster mode:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Importantly, to scale beyond the single process limitation in Redis&lt;/li&gt;
  &lt;li&gt;Less importantly, for High Availability (as this can be achieved by sentinel as well)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The problem of topology comes up when you care about High Availability in the Redis Cluster—if you’re not careful, you can run into situations where:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Too many of the replicas of a master are on the same host as the master. Here, if that single host fails, the entire hash slot has a chance to fail.&lt;/li&gt;
  &lt;li&gt;Too many masters are on the same host. Here, if that single host fails, multiple hash slots will need to switch over simultaneously.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The second issue is significantly less of a problem than the first, as switchovers are relatively uneventful most of the time. The rest of this article describes how you can deal with the first issue. You can use similar techniques for the second one too.&lt;/p&gt;

&lt;h1 id=&quot;monitoring-topology&quot;&gt;Monitoring Topology&lt;/h1&gt;

&lt;p&gt;Finding the current topology of the redis cluster is super easy, just run&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# note, this is an O(N) @slow command - you don&apos;t want to spam your instance with this every second!&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; CLUSTER NODES

&lt;span class=&quot;c&quot;&gt;# example taken from the official docs: https://redis.io/commands/cluster-nodes/&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# note the ips, and the mapping of who is a master to whom&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# &amp;lt;id&amp;gt;                                   &amp;lt;ip:port@cport[,hostname]&amp;gt;      &amp;lt;flags&amp;gt; &amp;lt;master&amp;gt; &amp;lt;ping-sent&amp;gt; &amp;lt;pong-recv&amp;gt; &amp;lt;config-epoch&amp;gt; &amp;lt;link-state&amp;gt; &amp;lt;slot&amp;gt; &amp;lt;slot&amp;gt; ... &amp;lt;slot&amp;gt;&lt;/span&gt;
07c37dfeb235213a872192d90877d0cd55635b91 127.0.0.1:30004@31004,hostname4 slave e7d1eecce10fd6bb5eb35b9f99a514335d9ba9ca 0 1426238317239 4 connected
67ed2db8d677e59ec4a4cefb06858cf2a1a89fa1 127.0.0.1:30002@31002,hostname2 master - 0 1426238316232 2 connected 5461-10922
292f8b365bb7edb5e285caf0b7e6ddc7265d2f4f 127.0.0.1:30003@31003,hostname3 master - 0 1426238318243 3 connected 10923-16383
6ec23923021cf3ffec47632106199cb7f496ce01 127.0.0.1:30005@31005,hostname5 slave 67ed2db8d677e59ec4a4cefb06858cf2a1a89fa1 0 1426238316232 5 connected
824fe116063bc5fcf9f4ffd895bc17aee7731ac3 127.0.0.1:30006@31006,hostname6 slave 292f8b365bb7edb5e285caf0b7e6ddc7265d2f4f 0 1426238317741 6 connected
e7d1eecce10fd6bb5eb35b9f99a514335d9ba9ca 127.0.0.1:30001@31001,hostname1 myself,master - 0 0 1 connected 0-5460
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;From here, we can build a representation of which nodes are replicas of which nodes and which nodes lie on which host, using which we can deduce the topology and which hash slots are at risk. To do this, we just map the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip:port&lt;/code&gt; pair to the current state flag (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;slave&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt;), and the master’s id following it.&lt;/p&gt;

&lt;p&gt;This is a bit tedious, so you can use this convenience script I’ve written:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# MIT Licenced, feel free to fork/copy from: https://github.com/vaishnavsm/redis-topology-monitor&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# note that in this example, I used a docker network, &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# and so each redis instance is on a different &quot;host&quot;&lt;/span&gt;
npx redis-topology-monitor find-topology &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; redis://localhost:6379 &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; password
Overview
&lt;span class=&quot;nt&quot;&gt;-------&lt;/span&gt;
👏 Looks like your cluster is evenly distributed, and no host contains more than one instance of a &lt;span class=&quot;nb&quot;&gt;hash &lt;/span&gt;slot
┌─────────┬─────────────┬─────────────────┬─────────────────────┬───────────────────────────────────────┬────────────────────────────────────────────┬─────────────────────────┐
│ &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;index&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; │ Slot Number │ Number of Hosts │ Maximum on One Host │                 Hosts                 │                 Master Id                  │     Master Address      │
├─────────┼─────────────┼─────────────────┼─────────────────────┼───────────────────────────────────────┼────────────────────────────────────────────┼─────────────────────────┤
│    0    │      1      │        3        │          1          │ &lt;span class=&quot;s1&quot;&gt;&apos;172.25.0.4, 172.25.0.8, 172.25.0.7&apos;&lt;/span&gt;  │ &lt;span class=&quot;s1&quot;&gt;&apos;5164940d4f389030a47af63447f2f8b425b17fd0&apos;&lt;/span&gt; │ &lt;span class=&quot;s1&quot;&gt;&apos;172.25.0.4:6379@16379&apos;&lt;/span&gt; │
│    1    │      2      │        3        │          1          │ &lt;span class=&quot;s1&quot;&gt;&apos;172.25.0.2, 172.25.0.5, 172.25.0.6&apos;&lt;/span&gt;  │ &lt;span class=&quot;s1&quot;&gt;&apos;9cbfd6b8fcc1defbf1e726ee22c1a727cb20c1ef&apos;&lt;/span&gt; │ &lt;span class=&quot;s1&quot;&gt;&apos;172.25.0.2:6379@16379&apos;&lt;/span&gt; │
│    2    │      3      │        3        │          1          │ &lt;span class=&quot;s1&quot;&gt;&apos;172.25.0.9, 172.25.0.3, 172.25.0.10&apos;&lt;/span&gt; │ &lt;span class=&quot;s1&quot;&gt;&apos;b2bc47d17f4ce689fffc4e6a49c9a45f9487996f&apos;&lt;/span&gt; │ &lt;span class=&quot;s1&quot;&gt;&apos;172.25.0.9:6379@16379&apos;&lt;/span&gt; │
└─────────┴─────────────┴─────────────────┴─────────────────────┴───────────────────────────────────────┴────────────────────────────────────────────┴─────────────────────────┘

Slots by Host
&lt;span class=&quot;nt&quot;&gt;-------&lt;/span&gt;
┌─────────┬───────────────┬────────┬────────┬────────┐
│ &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;index&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; │     Host      │ Slot 1 │ Slot 2 │ Slot 3 │
├─────────┼───────────────┼────────┼────────┼────────┤
│    0    │ &lt;span class=&quot;s1&quot;&gt;&apos;172.25.0.4&apos;&lt;/span&gt;  │   1    │        │        │
│    1    │ &lt;span class=&quot;s1&quot;&gt;&apos;172.25.0.8&apos;&lt;/span&gt;  │   1    │        │        │
│    2    │ &lt;span class=&quot;s1&quot;&gt;&apos;172.25.0.7&apos;&lt;/span&gt;  │   1    │        │        │
│    3    │ &lt;span class=&quot;s1&quot;&gt;&apos;172.25.0.2&apos;&lt;/span&gt;  │        │   1    │        │
│    4    │ &lt;span class=&quot;s1&quot;&gt;&apos;172.25.0.5&apos;&lt;/span&gt;  │        │   1    │        │
│    5    │ &lt;span class=&quot;s1&quot;&gt;&apos;172.25.0.6&apos;&lt;/span&gt;  │        │   1    │        │
│    6    │ &lt;span class=&quot;s1&quot;&gt;&apos;172.25.0.9&apos;&lt;/span&gt;  │        │        │   1    │
│    7    │ &lt;span class=&quot;s1&quot;&gt;&apos;172.25.0.3&apos;&lt;/span&gt;  │        │        │   1    │
│    8    │ &lt;span class=&quot;s1&quot;&gt;&apos;172.25.0.10&apos;&lt;/span&gt; │        │        │   1    │
└─────────┴───────────────┴────────┴────────┴────────┘

Slot Statuses
&lt;span class=&quot;nt&quot;&gt;-------&lt;/span&gt;

Slot 1
✅ This slot is perfectly evenly distributed

Slot 2
✅ This slot is perfectly evenly distributed

Slot 3
✅ This slot is perfectly evenly distributed
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;manually-changing-the-topology&quot;&gt;Manually Changing the Topology&lt;/h1&gt;

&lt;p&gt;The most effective way I have seen to manually change the topology is:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Have at least two extra instances, always on different hosts and always in replica mode, which act as “extra” replicas&lt;/li&gt;
  &lt;li&gt;When you detect a topology issue, pick one of these instances and make it into a replica of the problematic hash slot. This will always be possible, since two different nodes have one replica each.&lt;/li&gt;
  &lt;li&gt;After the above, if both the “extra replicas” are on the same host, find any random hash slot which does not have an instance on that host (if none exist, find the one that is “most spread out” in terms of topology) and switch one of the “extra replicas” to a replica of this hash slot. Mark one of the replicas of this hash slot as the “extra”&lt;/li&gt;
  &lt;li&gt;Repeat until the topology is safe&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2024-01-01-redis-hash-slot-failure-via-topology/shuffling.png&quot; alt=&quot;Untitled&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Note that we could have stopped at any time after the first step, since the immediate issue of single node failure has been solved.&lt;/p&gt;

&lt;p&gt;One benefit of this mechanism is that the more “extra replicas” you add, the more you can swap topologies at the same time.&lt;/p&gt;

&lt;p&gt;Note that if you have multiple “unsafe” hash slots on different machines, you can swap the replicas between them instead of swapping to the “extra replica” over and over.&lt;/p&gt;

&lt;p&gt;How do you actually “swap” these replicas you ask? Surprisingly, this is the easiest step—we don’t even need a helper script:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Run on the redis instance you want to change the status of&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# This assumes that this instance is a replica - &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# if it is a master, this will fail unless it is empty&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# if it is an empty master, it will change into a replica&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# docs here: https://redis.io/commands/cluster-replicate/&lt;/span&gt;
CLUSTER REPLICATE &amp;lt;node &lt;span class=&quot;nb&quot;&gt;id &lt;/span&gt;of master&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;automatically-changing-the-topology&quot;&gt;Automatically Changing the Topology&lt;/h1&gt;

&lt;p&gt;This involves a two-step process - we need to monitor the Redis cluster’s topology for potentially risky topologies, and then decide to change the topology on the fly. This is a complex operation - you may want to consider other factors such as the current load on the cluster, the predicted load during the changing operation, and other business requirements. However, this is the most &lt;em&gt;exciting&lt;/em&gt; part of this problem, so I’m taking a stab at it!&lt;/p&gt;

&lt;More to=&quot;&quot; come=&quot;&quot; soon=&quot;&quot;&gt;
&lt;/More&gt;</content><author><name>Vaishnav Sreekanth Menon</name></author><category term="DevOps" /><summary type="html">One of the (many) problems with running a production grade Redis cluster in my experience has been maintaining the topology of the cluster.</summary></entry></feed>